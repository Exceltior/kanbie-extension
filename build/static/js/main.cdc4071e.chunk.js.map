{"version":3,"sources":["initColumns.js","App.js","serviceWorker.js","index.js","assets/kanbie-logo.svg"],"names":["initColumns","title","items","id","content","App","useState","columns","setColumns","isInput","setInput","inputText","setInputText","loaded","setLoaded","useEffect","getColumns","localStorage","getItem","JSON","parse","onAddCard","e","key","push","uuid","className","alt","src","KanbieLogo","width","onDragEnd","result","source","destination","droppableId","filter","column","splice","index","sourceItems","destItems","length","removed","setItem","stringify","saveColumns","map","size","color","style","marginBottom","provided","snapshot","droppableProps","ref","innerRef","background","isDraggingOver","minHeight","paddingTop","marginTop","item","i","draggableId","draggableProps","dragHandleProps","userSelect","backgroundColor","isDragging","placeholder","position","top","right","margin","onClick","onOutsideClick","autoFocus","onKeyDown","onChange","target","value","maxLength","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.cdc4071e.chunk.js","sourcesContent":["const initColumns = [\n  {\n    title: \"To-do\",\n    items: [\n      {\n        id: 1,\n        content: \"ğŸ‘‹ Hi!  Im a task. You can try dragging me to the other sections. When you're done with me, throw me in the trash in the top right.\"\n      },\n      {\n        id: 2,\n        content: \"Press the add button to create a new task. When you're done typing, press enter to add it to your to-do list.\"\n      },\n    ]\n  },\n  {\n    title: \"Doing\",\n    items: []\n  },\n  {\n    title: \"Done\",\n    items: []\n  },\n];\n\nexport default initColumns;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport CheckboxMarkedCircleOutlineIcon from 'mdi-react/CheckboxMarkedCircleOutlineIcon';\nimport CheckboxMarkedCircleIcon from 'mdi-react/CheckboxMarkedCircleIcon';\nimport ProgressCheckIcon from 'mdi-react/ProgressCheckIcon';\nimport DeleteForeverIcon from 'mdi-react/DeleteForeverIcon';\nimport PlusIcon from 'mdi-react/PlusIcon';\n\nimport initColumns from './initColumns';\nimport KanbieLogo from './assets/kanbie-logo.svg';\nimport uuid from 'uuid';\nimport OutsideClickHandler from 'react-outside-click-handler';\n\nconst maxItems = 5;\n\nfunction App() {\n  const [columns, setColumns] = useState();\n  const [isInput, setInput] = useState(false);\n  const [inputText, setInputText] = useState(\"\");\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    const getColumns = localStorage.getItem(\"columns\");\n\n    if(!getColumns) {\n      setColumns(initColumns);\n    } else {\n      setColumns(JSON.parse(getColumns));\n    }\n\n    setLoaded(true);\n  }, []);\n\n  const saveColumns = (columns) => {\n    localStorage.setItem(\"columns\", JSON.stringify(columns));\n  }\n\n  const onDragEnd = (result) => {\n    const { source, destination } = result;\n\n    if(!destination) return;\n\n    //Delete\n    if(destination.droppableId === \"trash\") {\n      const sourceItems = columns.filter((column => column.title === source.droppableId))[0].items;\n      sourceItems.splice(source.index, 1);\n    } else {\n      //Different column\n      if(source.droppableId !== destination.droppableId) {\n        const sourceItems = columns.filter((column => column.title === source.droppableId))[0].items;\n        const destItems = columns.filter((column => column.title === destination.droppableId))[0].items;\n        if(destItems.length >= maxItems) return;\n        const [removed] = sourceItems.splice(source.index, 1);\n        destItems.splice(destination.index, 0, removed);\n      } else {\n        //Same column\n        const sourceItems = columns.filter((column => column.title === source.droppableId))[0].items;\n        const [removed] = sourceItems.splice(source.index, 1);\n        sourceItems.splice(destination.index, 0, removed);\n      }\n    }\n\n    saveColumns(columns);\n  }\n\n  const renderInputBox = () => (\n    <OutsideClickHandler onOutsideClick={() => {setInput(false)}}>\n      <textarea \n        placeholder=\"New task...\"\n        autoFocus\n        onKeyDown={(e) => onAddCard(e)}\n        onChange={e => setInputText(e.target.value)}\n        className=\"input-add\"\n        maxLength={100}\n      />\n    </OutsideClickHandler>\n  )\n\n  const handleClickAdd = () => {\n    setInput(true);\n\n  }\n\n  const onAddCard = (e) => {\n    if(e.key === \"Enter\" && inputText !== \"\") {\n      columns[0].items.push({\n        id: uuid(),\n        content: inputText\n      });\n\n      setInput(false);\n    }\n\n    return;\n  }\n\n  return (\n    <div>\n      <div className=\"header-container\">\n        <img alt=\"logo\" src={KanbieLogo} width={28} className=\"kanbie-logo\"/>\n        <div className=\"header\">\n          kanbie\n        </div>\n      </div>\n      {!!loaded && \n      <div className=\"main-container\">\n        <DragDropContext\n          onDragEnd={onDragEnd}\n        >\n          {columns.map(column => (\n            <div>\n              <div className=\"column-header-container\">\n                <div className=\"column-heading\">{column.title}</div>\n                {column.title === \"To-do\" ? \n                  <CheckboxMarkedCircleOutlineIcon size={24} color=\"#fff\" style={{marginBottom: \"8px\"}}/>\n                  : (column.title === \"Doing\" ?\n                  <ProgressCheckIcon size={24} color=\"#fff\" style={{marginBottom: \"8px\"}}/>\n                  : \n                  <CheckboxMarkedCircleIcon size={24} color=\"#fff\" style={{marginBottom: \"8px\"}}/>\n                  )\n                }\n              </div>\n              <Droppable droppableId={column.title}>\n                {(provided, snapshot) => (\n                  <div\n                    {...provided.droppableProps}\n                    ref={provided.innerRef}\n                    style={{\n                      background: snapshot.isDraggingOver ? \"#400033\" : \"#121212\",\n                      minHeight: \"400px\",\n                      paddingTop: \"50px\",\n                      marginTop: \"-62px\"\n                    }}\n                    className=\"droppable-container\"\n                  > \n                    \n                    {column.items.map((item, i) => (\n                      <Draggable key={item.id} draggableId={item.content + item.id} index={i}>\n                        {(provided, snapshot) => (\n                          <div \n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            ref={provided.innerRef}\n                            style={{\n                              userSelect: 'none',\n                              backgroundColor: snapshot.isDragging ? \"#272727\" : \"#1a1a1a\",\n                              ...provided.draggableProps.style\n                            }}\n                            className=\"draggable-card\"\n                          >\n                            {item.content}\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </div>\n          ))}\n          <Droppable droppableId=\"trash\">\n            {(provided, snapshot) => (\n              <div\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                style={{\n                  background: snapshot.isDraggingOver ? \"#6e0000\" : \"#3d0000\",\n                  width: \"20px\",\n                  position: \"absolute\",\n                  top: 0,\n                  right: 0,\n                  margin: \"12px\"\n                }}\n                className=\"droppable-container\"\n              > \n                <DeleteForeverIcon color=\"#fff\" className=\"delete-icon\"/>\n              </div>\n            )}  \n          </Droppable>\n        </DragDropContext>\n        <div \n          className=\"add-button-container droppable-container\"\n          onClick={() => handleClickAdd()}\n        >\n          <PlusIcon color=\"#fff\" className=\"add-icon\"/>\n          {!!isInput && renderInputBox()}\n        </div>\n      </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/kanbie-logo.0ec7d911.svg\";"],"sourceRoot":""}